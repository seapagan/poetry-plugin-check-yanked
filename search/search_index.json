{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Check for yanked packages in your Poetry project","text":"<p>This is a simple plugin for the Poetry dependency management tool.</p> <p>This plugin adds a new command to Poetry, <code>check-yanked</code>, which can be used to check if any of the dependencies in the project lock file <code>poetry.lock</code> have been yanked from PyPI by their maintainers. There is usually a pretty good reason for a package to be yanked, so it's a good idea to check for yanked packages in your project.</p> <p>It will download the latest metadata for each package in the <code>poetry.lock</code> file and cache it for a period of time (default 1 day) to minimize the number of requests to PyPI (and speed up future runs).</p> <p>Note</p> <p>Since this plugin uses the <code>poetry.lock</code> file to determine the exact versions of the dependencies to check, it will also check for any yanked dependencies of your project dependencies specified in the <code>pyproject.toml</code> file.</p> <p>This plugin could be added to a pre-commit hook to check for yanked packages before running any other checks or tests.</p> <p>Tip</p> <p>There is also a GitHub Action for this plugin that can be run automatically to ensure that all dependencies are up-to-date and not yanked.</p> <p>This plugin was written to learn how to write a Poetry plugin and to scratch an itch I had for a tool like this. I have more ideas for features and improvements, and I welcome any contributions or suggestions.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>This is an auto-generated log of all the changes that have been made to the project since the first release, with the latest changes at the top.</p> <p>This project adheres to Semantic Versioning.</p>"},{"location":"changelog/#v022-june-18-2024","title":"v0.2.2 (June 18, 2024)","text":"<p>'0.2.2 (Security Release)'</p> <p>Security Update</p> <ul> <li>Updates <code>urllib3</code> to fix a MODERATE severity security issue.</li> </ul> <p>Dependency Updates</p> <ul> <li>Bump urllib3 from 2.2.1 to 2.2.2 (#13) by dependabot[bot]</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#v021-june-17-2024","title":"v0.2.1 (June 17, 2024)","text":"<p>'0.2.1'</p> <p>Bug Fixes</p> <ul> <li>Fix plugin description spanning lines (#11) by seapagan</li> </ul> <p>Dependency Updates</p> <ul> <li>Bump mkdocs-material from 9.5.26 to 9.5.27 (#10) by dependabot[bot]</li> <li>Bump ruff from 0.4.8 to 0.4.9 (#9) by dependabot[bot]</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#v020-june-14-2024","title":"v0.2.0 (June 14, 2024)","text":"<p>'0.2.0'</p> <p>New Features</p> <ul> <li>Implement caching to store the yanked status of already checked libraries. (#6) by seapagan</li> </ul> <p>Documentation</p> <ul> <li>Add a basic documentation site (#7) by seapagan</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#v011-june-11-2024","title":"v0.1.1 (June 11, 2024)","text":"<p>'0.1.1'</p> <p>A quick release to lower the required version of Poetry to 1.6.0 and add PyPI trove classifiers</p> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#v010-june-11-2024","title":"v0.1.0 (June 11, 2024)","text":"<p>'0.1.0'</p> <p>This is the first release.</p> <p>This changelog was generated using github-changelog-md by Seapagan</p>"},{"location":"contributing/","title":"Contributing to this Project","text":"<p>Thank you for your interest in contributing to <code>poetry-plugin-check-yanked</code>! We welcome all contributions, big or small.</p> <p>If you are not sure where to start, please take a look at the open issues. If you have an idea for a new feature or would like to report a bug, please open a new issue. You can also check the TODO List for ideas.</p> <p>I also welcome contributions to the documentation. If you find any errors or would like to suggest improvements, please open a new issue or submit a Pull Request.</p> <p>I you would like to contribute to the code, but find the requirements below a bit daunting, please feel free to open a discussion and I can help you get started, or even pair on a PR.</p>"},{"location":"contributing/#prerequisites","title":"Prerequisites","text":"<p>Since this is a Python project, you will need to have Python installed on your machine. You can download the latest version of Python from the official website or using your Operating system's package manager. This project requires Python 3.9 or higher.</p> <p>I'd recommend using pyenv to manage your Python installations, the pyenv-installer works for Linux and Mac OS X. For Windows, you can use the pyenv-win port. See here for installation instructions.</p> <p>We also use Poetry to manage our dependencies. You should have this installed as well. You can install Poetry by following the instructions on the Poetry website.</p>"},{"location":"contributing/#getting-started","title":"Getting Started","text":"<p>Before you start contributing, please make sure you have read and understood our Code of Conduct and License.</p> <p>To get started, follow these steps:</p> <ol> <li>Fork the repository and clone it to your local machine.</li> <li>Install the required dependencies (see next section).</li> <li>Create a new branch for your changes: <code>git checkout -b my-new-feature</code>.</li> <li>Make your changes and commit them: <code>git commit -am 'Add some feature'</code>.</li> <li>Push your changes to your fork: <code>git push origin my-new-feature</code>.</li> <li>Create a new pull request.</li> </ol>"},{"location":"contributing/#install-dependencies","title":"Install Dependencies","text":"<p>Run the following command to install the required dependencies:</p> <pre><code>$ poetry install\n</code></pre> <p>You then need to activate the virtual environment:</p> <pre><code>$ poetry shell\n</code></pre> <p>From here you can start working on the project. If you are using an IDE such as VSCode or PyCharm, you can set the use their Python interpreter setting to use the virtual environment that has just been created.</p>"},{"location":"contributing/#using-pip","title":"Using Pip","text":"<p>If you prefer to use <code>pip</code> instead of <code>poetry</code>, you can install the dependencies using the auto-generated <code>requirements-dev.txt</code> file:</p> <pre><code>$ pip install -r requirements-dev.txt\n</code></pre> <p>However, Poetry is the recommended (and only supported) way of developing this project and is tightly integrated with the code and tools.</p>"},{"location":"contributing/#linting","title":"Linting","text":"<p>I am quite strict about linting and code formatting and have set up a number of pre-commit hooks and tasks to ensure that the code meets the required standards.</p> <p>Use the <code>poe ruff</code>, <code>poe format</code> and <code>poe mypy</code> tasks regularly. If you use VSCode, install the <code>Ruff</code> and<code>MyPy</code> extensions and set them to run on save. The included <code>.vscode</code> folder has the settings for this.</p>"},{"location":"contributing/#install-git-pre-commit-hooks","title":"Install Git Pre-Commit hooks","text":"<p>Please install this if you are intending to contribute to the project. It will check commits locally before they are pushed up to the Repo. The GitHub CI runs the linting checks (and in future probably MyPy as well), and will fail if there are any errors.</p> <pre><code>$ pre-commit install\npre-commit installed at .git/hooks/pre-commit\n</code></pre> <p>This will ensure that all code meets the required linting standard before being committed.</p>"},{"location":"contributing/#run-pre-commit-manually","title":"Run pre-commit manually","text":"<p>You can run these checks manually on all staged files using the below command :</p> <pre><code>poe pre\n</code></pre>"},{"location":"contributing/#testing","title":"Testing","text":"<p>We are using pytest for testing.</p> <p>At the moment the test framework is set up but we only have about 50% coverage. We will be adding more tests as we go along - and most definitely welcome any contributions to this area!</p> <p>If you add any new features, please add tests for them. This will help us to ensure that the code is working as expected and will prevent any regressions. Currently we are not enforcing this until we have better coverage of the code - however if you break any existing tests, the CI will fail.</p> <p>There is a task set up to run tests:</p> <pre><code>$ poe test\n</code></pre> <p>And run a watcher to automatically re-run the tests when files change:</p> <pre><code>$ poe test:watch\n</code></pre> <p>You can also run the tests manually using the following command:</p> <pre><code>$ pytest\n</code></pre> <p>The task is set up so we can automatically add other options in the future.</p>"},{"location":"contributing/#changelog","title":"Changelog","text":"<p>The changelog is automatically generated, using this project, so please do not edit it manually.</p> <p>For maintainers, there is a POE task that will run this and update the changelog file.</p> <pre><code>$ poe changelog\n</code></pre> <p>You would also need to add a GitHub Personal Access Token to a local config file as usual. See the section in the Documentation for information.</p> <p>However, you should NOT include a change to the <code>CHANGELOG.md</code> file in any Pull Requests. This will be handled by the maintainers when a new release is made. Your GitHub username will be added to the changelog automatically beside your PR.</p>"},{"location":"contributing/#convenience-tasks","title":"Convenience Tasks","text":"<p>There are a few other convenience tasks that can be run using the <code>poe</code> command. These are defined in the <code>pyproject.toml</code> file.</p> <p>Each of these tasks can have extra options added which will be passed to the underlying tool.</p> <p>Run <code>mypy</code> on the code base in strict mode:</p> <pre><code>$ poe mypy\n</code></pre> <p>Format the code using <code>ruff format</code>:</p> <pre><code>$ poe format\n</code></pre> <p>Lint the code using <code>ruff</code>:</p> <pre><code>$ poe ruff\n</code></pre> <p>Check the Markdown:</p> <pre><code>$ poe markdown\n</code></pre> <p>Run <code>ruff</code>, <code>mypy</code> and <code>format</code> at the same time:</p> <pre><code>$ poe lint\n</code></pre>"},{"location":"contributing/#documentation-tasks","title":"Documentation Tasks","text":"<p>These are to help with developing and updating the documentation.</p> <ul> <li><code>poe docs:serve</code> - Serve the MkDocs locally for testing and development</li> <li><code>poe docs:serve:all</code> - Same as above, but opens to all interfaces so you can   view it on other devices on your network</li> <li><code>poe docs:build</code> - Build the MkDocs site into the <code>dist</code> folder</li> <li><code>poe docs:publish</code> - Publish the docs to your GitHub pages. Note that only   those with write-access to this repo can do this.</li> </ul>"},{"location":"contributing/#guidelines","title":"Guidelines","text":"<p>Here are some guidelines to follow when contributing to <code>github-changelog-md</code>:</p> <ul> <li>Follow the PEP 8 style guide. The   pre-commit hooks will check for this. We are using the Ruff   Formatter.</li> <li>Fix any linting errors or warnings. The pre-commit hooks will check for   this also. Ruff is installed and set to pretty   strict settings. Ruff now replaces all the original linters that were   installed. There is also a Markdown linter.</li> <li>MyPy is installed and we are using   type hints. Please try to add type hints to your code. If you see any areas of   the code that are missing type hints, please feel free to open a PR and add   them \ud83d\ude01!</li> <li>Write clear and concise commit messages.</li> <li>Write tests for your code.</li> <li>Make sure your code passes all existing and new tests before submitting a pull   request.</li> <li>Document your code using   docstrings. This project uses the   Google Docstring   Spec though   at this time is a bit slack on listing the Args and Returns. I will be adding   these in as I go along so feel free to add them in if you are contributing .</li> <li>If you add or change any functionality, please update the documentation   accordingly.</li> <li>Use GitHub   issues to   report bugs or suggest new features.</li> </ul> <p>If you are using VSCode, there is a config file in the <code>.vscode</code> folder that will help you to follow these guidelines. You may need to install some extensions to get the most out of it. I'll add a list of recommended extensions here soon. The <code>Python</code>, <code>MyPy</code> and  <code>Ruff</code> ones are very helpful (the included <code>.vscode</code> folder helps configure these).</p>"},{"location":"contributing/#contact","title":"Contact","text":"<p>If you have any questions or need help with contributing, please contact me @seapagan on GitHub. You can also use the GitHub Discussions feature.</p> <p>Happy contributing!</p>"},{"location":"github-action/","title":"GitHub Action","text":"<p>There is now also a GitHub Action for this plugin that can be run for all pull-requests to ensure that all dependencies are up-to-date and not yanked.</p> <p>See the repository for the check-yanked-packages action for full details.</p> <p>This action is a simple wrapper around the <code>check-yanked</code> command provided by this plugin. It will run the <code>check-yanked</code> command and fail the build if any yanked packages are found.</p> <pre><code>name: Check for Yanked Packages\n\non: [push, pull_request]\n\njobs:\n  check-yanked:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Run poetry check-yanked\n        uses: seapagan/check-yanked-packages@v1\n</code></pre> <p>It can also be added to an existing workflow like this:</p> <pre><code>name: CI\n\non: [push, pull_request]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v4\n\n      - uses: actions/setup-python@v5\n        with:\n          python-version: '3.x'\n\n      # other steps...\n\n      - name: Run poetry check-yanked\n        uses: seapagan/check-yanked-packages@v1\n</code></pre> <p>If you run the <code>actions/setup-python</code> and/or <code>actions/checkout</code> actions before this action, it will use the version of Python installed by that action and the <code>poetry.lock</code> file in the root of the repository by default. It will not try to install Python or checkout the repository again. Convereley, if you do not run those actions, it will automatically run them for you.</p>"},{"location":"github-action/#options","title":"Options","text":"<p>There are currently two options available for this action:</p> <ul> <li><code>path</code> - The path to the directory containing the <code>poetry.lock</code> file. This   defaults to the root of the repository.</li> <li><code>python-version</code> - The version of Python to use when running the action. This   defaults to the latest version of Python 3.x available on the runner.</li> </ul> <p>Note</p> <p>If you are using the <code>actions/setup-python</code> action manually, the <code>python-version</code> for this action will be ignored, and the version of Python installed by <code>actions/setup-python</code> will be used instead.</p> <p>These are both optional, and can be set in the workflow file like so:</p> <pre><code>- name: Run poetry check-yanked\n  uses: seapagan/check-yanked-packages@v1\n  with:\n    python-version: '3.10'\n    path: 'path/to/directory'\n</code></pre>"},{"location":"installation/","title":"Installation","text":"<p>This is a Poetry plugin so it needs to be installed via Poetry. If you haven't already installed Poetry, you can find instructions on how to do so in the Poetry documentation.</p> <p>The easiest way to install this Poetry plugin is via the <code>self add</code> command of Poetry.</p> <pre><code>poetry self add poetry-plugin-check-yanked\n</code></pre> <p>If you used <code>pipx</code> to install Poetry you can add the plugin via the <code>pipx inject</code> command.</p> <pre><code>pipx inject poetry poetry-plugin-check-yanked\n</code></pre> <p>Otherwise, if you used <code>pip</code> to install Poetry you can add the plugin packages via the <code>pip install</code> command.</p> <pre><code>pip install poetry-plugin-check-yanked\n</code></pre>"},{"location":"license/","title":"License","text":"<pre><code>MIT License\n\nCopyright 2024 Grant Ramsay\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \u201cSoftware\u201d), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n</code></pre>"},{"location":"todo/","title":"TODO","text":"<ul> <li>Add pre-commit integration - ensure it only works on changed <code>poetry.lock</code>   files for it will be slow on large projects</li> <li>Offer to update any yanked packages to the latest version, or show a list of   newer versions</li> <li>add option to clear the cache, either all of it or just for a specific package</li> <li>list all yanked packages in the cache</li> <li>flag to always use the cache, even if it has expired</li> <li>add defined expiry periods for the config file = \"1h\",\"1d\", \"1w\", \"1m\", etc.   Make the suffix apply to the period as well so you can have \"1h\", \"2h\",   \"3h\",etc</li> </ul>"},{"location":"todo/#taking-this-further","title":"Taking this further","text":"<p>Write a non-poetry version that can be used with any project that has a supported lock file, and a way of determining if a project is 'yanked' or not:</p> <ul> <li><code>requirements.txt</code> file</li> <li><code>Pipfile</code></li> <li>yarn.lock</li> <li>package-lock.json</li> <li>Gemfile.lock</li> <li>cargo.lock</li> <li>etc?</li> </ul>"},{"location":"usage/","title":"Usage","text":"<p>Usage is pretty simple. Just run the <code>check-yanked</code> command from the root of your project. The plugin will download the latest metadata for each package in the <code>poetry.lock</code> file and check if any of them are yanked. If any are found, the command will return a non-zero exit code and list the yanked packages along with the reason for the yank. Once a specific package version has been checked, it will be cached for a period of time (default 1 day though this can be configured).</p> <pre><code>poetry check-yanked\n</code></pre> <p>The command will return a non-zero exit code if any dependencies have been yanked along with a list of the yanked dependencies and the reason for the yank.</p>"},{"location":"usage/#available-options","title":"Available options","text":"<ul> <li><code>--full</code> - Check each project dependency package again, even if it is already   in the cache.</li> <li><code>--refresh</code> - Refesh the entire cache and exit, no not check for yanked   packages.</li> <li><code>--no-progress</code> - Don't show the progress bar when checking for yanked   packages, useful for CI/CD environments.</li> <li><code>--quiet</code> - Don't show any output, just return a non-zero exit code if any   dependencies are yanked.</li> <li><code>--verbose</code> - Show more detailed output, including each dependency and it's   yank status. This disables the progress bar.</li> </ul>"},{"location":"usage/#configuration","title":"Configuration","text":"<p>At this time, the only configuration option is the cache timeout, which is set to 1 day by default. This can be changed by adding a <code>[tool.check-yanked]</code> section to the <code>pyproject.toml</code> file with a <code>cache_expiry</code> key. This value is in seconds. and the default is 86400 (1 day). Future versions of the plugin will offer pre-defined cache times (e.g. 1 hour, 1 day, 1 week, etc.) as well as the ability to disable the cache entirely.</p> <pre><code>[tool.check-yanked]\ncache_expiry = 3600 # 1 hour\n</code></pre>"}]}